<%- include("../partials/user/header.ejs") %>
<%- include("../partials/user/navbar.ejs") %>

    
    
  <% if(orders.length>0){%>
      <div class="container mt-5 pt-4">
  <% orders.forEach(order=>{%>
    <div class="container my-5">

      <div class="row g-4">
        <!-- Order 1 -->
        <div class="col-12">
          <div class="card shadow-sm order-card">
            <div class="card-body">
              <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap">
                <h6 class="card-title">Order ID: <span class="text-muted"><%= order.orderId %></span></h6>
                <span class="badge bg-primary"><%= order.overAllStatus || "Pending" %></span>
              </div>
              <% order.orderedItems.forEach(item=> { %>
              <div class="row mx-2 mx-md-5 mb-5 product-card bg-light">
                <div class="col-md-4 d-flex order-details">
                  <div class="order-img d-flex align-items-center justify-content-center me-md-3" style="width: 120px; height: 150px;">
                    <img src="/uploads/re-image/<%= item.product.productImage[0] %>" class="img-fluid" alt="" style="object-fit: contain;width: 100%;height: 100%;">
                  </div>
                  <div class="d-flex flex-column justify-content-between">
                    <div class="d-flex flex-column">
                      <p class="mb-0"><span class="fw-bold"><%= item.product.productName %></span></p>
                      <p class="mb-0"><span class="fw-semibold" style="font-size: 14px;">Color: <%= item.product.color ||"N/A"%></span></p>
                      <!-- <p class="mb-0"><span class="fw-normal text-muted text-sm"><%= item.product.category %></span></p> -->
                      <p class="mb-0"><span class="text-sm fw-bold" style="font-size: 12px;">QTY: <%= item.quantity %></span></p>
                    </div>
                    <div>
                      <a href="/orders/order-details/<%= order.orderId %>?productId=<%= item.product._id %>" class="btn btn-outline-dark btn-sm">View Details</a>
                    </div>
                  </div>
                </div>

                <div class="col-md-4 d-flex align-items-center justify-content-center flex-column  order-actions">
                  
                    <p class="mb-0"><span class="text-muted">Status</span></p>
                    <% if(item.status === "Processing"||item.status==="Shipped"||item.status==="Delivered") {%>
                      <p class="mb-0"><span class="fw-bold text-success"><%= item.status %></span></p>
                    <%} else if(item.status){%>
                      <p class="mb-0"><span class="fw-bold text-danger"><%= item.status %></span></p>
                      <% } %>  
                  
                </div>

                <div class="col-md-4 order-meta">
                  <div class="d-flex flex-column align-items-md-end justify-content-md-between">
                    <div class="d-flex flex-column align-items-md-end">
                      <p class="mb-1">
                        <% if(item.status === "Cancelled") {%>
                          <button class="btn-outline-secondary" disabled>Cancelled</button>
                        <%}else if(item.status === "Processing"){%>
                          <button type="button" 
                        data-order-id="<%= order.orderId %>"
                        data-product-id="<%= item.product._id %>"
                         class="btn btn-danger cancel-orderitem-btn btn-sm">Cancel item</button>
                          <%} else if(item.status === "Delivered"){%>
                            <button type="button" 
                              data-bs-toggle="modal"
                              data-bs-target="#returnModal"
                              data-order-id="<%= order.orderId %>"
                              data-product-id="<%= item.product._id %>" 
                              class="btn btn-danger btn-sm">Return item</button>
                          <%} else if(item.status === "Return Request"){%>
                            <button class="btn-outline-secondary" disabled>Return Requested</button>
                          <% } else if(item.status === "Returned"){ %>
                            <button class="btn-outline-secondary" disabled>Returned</button>
                          <%}%>  
                        </p>
                    <p class="fw-semibold" style="font-size: 13px;">Ordered Date: <span><%= order.createOn.toDateString() %></span></p>
                    </div>
                    <div>
                      <p class="mb-0 text-sm fw-semibold">Price: <span class="fw-bold text-success">₹<%= item.price %></span></p>
                    </div>
                  </div>
                </div>
              </div>
              <%})%>
              <div class="d-flex justify-content-between align-items-center mt-3 flex-wrap">
                  <% if(order.overAllStatus === "Delivered") {%>
                    <button data-order-id="<%= order.orderId %>" class="btn btn-outline-dark btn-sm mb-2 mb-md-0 order-return-btn">Return Order</button>
                  <% } else if(order.overAllStatus === "Processing" || order.overAllStatus === "Pending") {%>
                    <button data-order-id="<%= order.orderId %>" class="btn btn-outline-dark btn-sm mb-2 mb-md-0 order-cancel-btn">Cancel order</button>
                  <%} else{ %>  
                    <a href="/product/all" class="btn btn-outline-dark btn-sm mb-2 mb-md-0">Shop</a>
                    <%}%>
                  <span class="fw-bold text-end ms-auto">Total: ₹<%= order.finalAmount %></span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div> 
    
    <% }) %> 
        <div class="container mt-3" id="paginationSection">
        <nav aria-label="Page navigation">
          <ul class="pagination justify-content-center mb-4" style="margin-right: -50px;">
            <% const maxVisiblePages=3; let startPage=Math.max(1, currentPage - 1); let endPage=startPage +
              maxVisiblePages - 1; if (endPage> totalPages) {
              endPage = totalPages;
              startPage = Math.max(1, endPage - maxVisiblePages + 1);
              }
              %>

              <!-- Previous Button -->
              <li class="page-item <%= currentPage == 1 ? 'disabled' : '' %>">
                <a class="page-link" href="?page=<%= parseInt(currentPage) - 1 %>&search=<%= search %>">&laquo;</a>
              </li>

              <!-- Page Numbers -->
              <% for (let i=startPage; i <=endPage; i++) { %>
                <li class="page-item <%= i == currentPage ? 'active' : '' %>">
                  <a class="page-link" href="?page=<%= i %>&search=<%= search %>">
                    <%= i %>
                  </a>
                </li>
                <% } %>

                  <!-- Next Button -->
                  <li class="page-item <%= currentPage == totalPages ? 'disabled' : '' %>">
                    <a class="page-link" href="?page=<%= parseInt(currentPage) + 1 %>&search=<%= search %>">&raquo;</a>
                  </li>
          </ul>
        </nav>
      </div>
      </div>
      <!-- Return Modal -->
      <div class="modal fade" id="returnModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <form id="returnForm" method="POST">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Return Product</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="returnOrderId" name="orderId">
          <input type="hidden" id="returnProductId" name="productId">

          <div class="mb-3">
            <label for="returnReason" class="form-label">Select Return Reason</label>
            <select name="returnReason" id="returnReason" class="form-select" required>
              <option value="">Select a reason</option>
              <option value="Damaged Product">Damaged Product</option>
              <option value="Wrong Item Delivered">Wrong Item Delivered</option>
              <option value="Other">Other</option>
            </select>
          </div>

          <div class="mb-3" id="otherReasonDiv" style="display:none;">
            <label for="otherReason" class="form-label">Describe the reason</label>
            <textarea id="otherReason" class="form-control" rows="3" placeholder="Enter your reason"></textarea>
          </div>

        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-danger">Submit Return</button>
        </div>
      </div>
    </form>
  </div>
</div>

    <% }else{ %>
      <div class="container d-flex align-items-center justify-content-center">
        <div class="row d-flex flex-column justify-content-center align-items-center">
          <p>No Items found</p>
          <a href="/product/all">Explore Products</a>
        </div>
      </div>
    <% } %>



      <!-- Scripts -->

      <%- include("../partials/user/footer.ejs") %>

      <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
      <script>

document.addEventListener("DOMContentLoaded", function () {
  const returnButtons = document.querySelectorAll(".order-return-btn");

  returnButtons.forEach((btn) => {
    btn.addEventListener("click", async () => {
      const orderId = btn.getAttribute("data-order-id");

      const { value: reason } = await Swal.fire({
        title: "Return Order",
        input: "select",
        inputOptions: {
          "Damaged Product": "Damaged Product",
          "Wrong Item Delivered": "Wrong Item Delivered",
          "Not as Described": "Not as Described",
          "Other": "Other"
        },
        inputPlaceholder: "Select a reason",
        showCancelButton: true,
        inputValidator: (value) => {
          if (!value) return "You need to select a reason";
        }
      });

      if (reason) {
        let finalReason = reason;

        if (reason === "Other") {
          const { value: otherReason } = await Swal.fire({
            title: "Enter return reason",
            input: "textarea",
            inputPlaceholder: "Type your reason here...",
            inputAttributes: {
              'aria-label': "Type your reason here"
            },
            showCancelButton: true,
            inputValidator: (value) => {
              if (!value) return "You have to type a reason!";
            }
          });

          if (!otherReason) return; // user canceled
          finalReason = otherReason;
        }

        try{
          const res = await fetch(`/orders/return/${orderId}`,{
            method:"POST",
            headers:{"Content-Type":"application/json"},
            body:JSON.stringify({returnReason:finalReason})
          })

          const data = await res.json();

          if(data.success){
            Swal.fire("Returned",data.message,'success').then(()=>location.reload());
          }
          else{
            Swal.fire("Error",data.message,"error");
          }
        }
        catch(error){
          console.log("Error",error.message);
          Swal.fire("Error","Something Went Wrong","error");
        }
       
      }
    });
  });
});
       
document.addEventListener("DOMContentLoaded",function(){
  const cancelButtons = document.querySelectorAll(".order-cancel-btn");

  cancelButtons.forEach(btn=>{
    btn.addEventListener("click",async()=>{
      const orderId = btn.getAttribute("data-order-id");

      const {value:reason} = await Swal.fire({
        title:"Cancel Order",
        input:'select',
        inputOptions:{
          "Changed my mind": "Changed my mind",
          "Found a better price": "Found a better price",
          "Ordered by mistake": "Ordered by mistake",
          "Other": "Other"
        },
        inputPlaceholder:"Select a reason",
        showCancelButton:true,
        inputValidator:(value)=>{
          if(!value)return "You need to select a reason!"
        }
      })

      if(reason){
        let finalReason = reason;
        if(reason==="Other"){
          const {value:otherReason} =await Swal.fire({
            title:"Enter cancellation reason",
            input:"textarea",
            inputPlaceholder:"Type your reason here...",
            inputAttributes:{
              'aria-label':'Type your reason here'
            },
            showCancelButton:true,
            inputValidator:(value)=>{
              if(!value)return "Please enter a reason!"
            }
          });
          if(!otherReason) return;
          finalReason = otherReason
        }

        try {

           const res = await fetch(`/orders/cancel/${orderId}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ cancelReason: finalReason })
          });

          const data = await res.json();

          if (data.success) {
            Swal.fire("Cancelled!", data.message, "success").then(() => location.reload());
          } else {
            Swal.fire("Error", data.message, "error");
          }
          
        } catch (error) {
          console.error(error.message);
          Swal.fire("Error", "Something went wrong", "error");
        }

      }

    })
  })

})




       document.addEventListener("DOMContentLoaded", function () {
  const returnModal = document.getElementById("returnModal");
  const returnForm = document.getElementById("returnForm");
  const returnReasonSelect = document.getElementById("returnReason");
  const otherReasonDiv = document.getElementById("otherReasonDiv");
  const otherReasonTextarea = document.getElementById("otherReason");

  // Populate hidden fields when modal opens
  returnModal.addEventListener("show.bs.modal", function (event) {
    const button = event.relatedTarget;
    const orderId = button.getAttribute("data-order-id");
    const productId = button.getAttribute("data-product-id");
    document.getElementById("returnOrderId").value = orderId;
    document.getElementById("returnProductId").value = productId;
  });

  // Show/hide textarea based on select
  returnReasonSelect.addEventListener("change", () => {
    if (returnReasonSelect.value === "Other") {
      otherReasonDiv.style.display = "block";
      otherReasonTextarea.required = true;
    } else {
      otherReasonDiv.style.display = "none";
      otherReasonTextarea.required = false;
    }
  });

  // Handle form submission via fetch (AJAX)
  returnForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const orderId = document.getElementById("returnOrderId").value;
    const productId = document.getElementById("returnProductId").value;
    let returnReason = returnReasonSelect.value;

    // If "Other" is selected, use textarea value
    if (returnReason === "Other") {
      returnReason = otherReasonTextarea.value.trim();
      if (!returnReason) {
        Swal.fire("Info", "Please describe the reason for return", "info");
        return;
      }
    }

    try {
      const res = await fetch("/orders/return/item", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ orderId, productId, returnReason })
      });
      const data = await res.json();

      if (data.success) {
        Swal.fire("Success", data.message, "success").then(() => location.reload());
      } else {
        Swal.fire("Error", data.message, "error");
      }
    } catch (err) {
      console.error(err);
      Swal.fire("Error", "Something went wrong", "error");
    }
  });
});

        document.addEventListener("DOMContentLoaded", function () {
          document.querySelectorAll(".cancel-orderitem-btn").forEach(btn => {
            btn.addEventListener("click", async () => {

              const orderId = btn.getAttribute("data-order-id");
              const productId = btn.getAttribute("data-product-id");

              const result = await Swal.fire({
                title: "Are you sure?",
                icon: "warning",
                text: "This will cancel the product from your order.",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, cancel it!",
                cancelButtonText: "No, keep it"
              })

              if(!result.isConfirmed)return;

              const {value:reason} = await Swal.fire({
                title:"Select a reason for cancellation",
                input:"select",
                inputOptions:{
                  'Changed my mind': 'Changed my mind',
                  'Ordered by mistake': 'Ordered by mistake',
                  'Found a better price': 'Found a better price',
                  'Other': 'Other'
                },
                inputPlaceholder:"Select a reason",
                showCancelButton:true
              })

              if(!reason){
                Swal.fire({
                  icon:"info",
                  title:"Cancelled",
                  text:"You need to select a reason to cancel",
                })
                return;
              }

              if (result.isConfirmed) {
                try {

                  const res = await fetch("/orders/cancel/item", {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ orderId, productId,reason})
                  })

                  const data = await res.json();

                  if (data.success) {
                    Swal.fire({
                      icon: "success",
                      title: "Cancelled",
                      text: data.message
                    }).then(() => location.reload());
                  }
                  else {
                    Swal.fire({
                      icon: "error",
                      title: "OOPS...",
                      text: data.message || "Failed to cancel order"
                    })
                  }

                } catch (error) {
                  console.log("Error:", error.message);
                  Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: "Something went wrong"
                  });
                }
              }

            })
          })
        })

      </script>
</body>

</html>